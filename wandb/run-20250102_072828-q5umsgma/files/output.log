[DEBUG] Initializing Embeddings with img_size: (224, 224)
[DEBUG] Grid size: (14, 14)
[DEBUG] Patch size: (1, 1)
[DEBUG] Patch size real: (16, 16)
[DEBUG] Number of patches: 196
[DEBUG] Using hybrid model
[DEBUG] Embeddings initialized successfully.
Namespace(root_path='kits19/data', list_dir='./lists_kits19', dataset='KiTS19', num_classes=3, max_iterations=50000, max_epochs=150, batch_size=4, n_gpu=1, deterministic=1, base_lr=0.01, img_size=224, seed=1234, n_skip=3, vit_name='R50-ViT-B_16', vit_patches_size=16, checkpoint_dir='./checkpoints_kits1', use_attention=1, exp='TU_KiTS19_224')
No checkpoint or best model found. Starting training from scratch.
18375 iterations per epoch. 50000 total iterations.
  0%|                                       | 0/50000 [00:00<?, ?it/s]
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 1: Loss 0.8653
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 2: Loss 0.8223
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 3: Loss 0.7618
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 4: Loss 0.6728
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 5: Loss 0.6074
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 6: Loss 0.5316
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
Iteration 7: Loss 0.4941
[DEBUG] Forward pass with input shape: torch.Size([4, 3, 224, 224])
[DEBUG] Hybrid model output shape: torch.Size([4, 1024, 14, 14])
[DEBUG] Patch embeddings output shape: torch.Size([4, 768, 14, 14])
[DEBUG] Flattened and transposed embeddings shape: torch.Size([4, 196, 768])
[DEBUG] Embeddings with position added shape: torch.Size([4, 196, 768])
  0%|                                       | 0/50000 [00:26<?, ?it/s]
Traceback (most recent call last):
  File "/home/hous/Desktop/Kidney_Segmentation/TransUNet/train.py", line 86, in <module>
    trainer_kits19(args, net)
  File "/home/hous/Desktop/Kidney_Segmentation/TransUNet/trainer.py", line 132, in trainer_kits19
    for sampled_batch in train_loader:
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1328, in _next_data
    idx, data = self._get_data()
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1284, in _get_data
    success, data = self._try_get_data()
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 1132, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/queue.py", line 180, in get
    self.not_empty.wait(remaining)
  File "/home/hous/anaconda3/envs/torch/lib/python3.10/threading.py", line 324, in wait
    gotit = waiter.acquire(True, timeout)
KeyboardInterrupt